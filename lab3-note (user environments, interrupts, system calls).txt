What is the purpose of having an individual handler function for each exception/interrupt? 
(i.e., if all exceptions/interrupts were delivered to the same handler, what feature that
 exists in the current implementation could not be provided?)
  
  If there is just one handler,it can not detect the type of interrupts it is handling (trapno, DPL). 
  Moreover, since some interrupts generate error codes while others do not,the layout of 
  struct Trapframe is hard to maintain by the only handler (it cannot judge when to push a 
  dummy error code onto stack).

Did you have to do anything to make the user/softint program behave correctly? The grade 
script expects it to produce a general protection fault (trap 13), but softint's code says 
int $14. Why should this produce interrupt vector 13? What happens if the kernel actually 
allows softint's int $14 instruction to invoke the kernel's page fault handler (which is 
interrupt vector 14)?

  No, we did not have to do anything to make softint behave correctly.  This is because we
  should NOT allow users to invoke exceptions of their choice.  If they could predict an 
  exception being called, they could put in malicious code on the stack, which the kernel 
  would then read out and execute with kernel privileges.  We instead trigger interrupt 13 
  since the user program attempted to violate its privileges.