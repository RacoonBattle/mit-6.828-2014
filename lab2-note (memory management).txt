
    Physical memory layout just after page_init in mem_init:
      
      +--------------------------------+ <- 0x10000000 (256MB)
      |                                |
      + - - - - - - - - - - - - - - - -+ <- we may not have so much       
      |                                |    phys memory as 256MB
      |         free pages             |
      |                                |
      +--------------------------------+
      |   array of struct PageInfo     |    extended memory
      +--------------------------------+  
      | kernel page directory (1 page) |
      +--------------------------------+
      |                                |
      |     code and data of kernel    | 
      |                                |
      +--------------------------------+  <- 0x00100000 (1MB)
      |                                |    IO hole
      +--------------------------------+  <- 0x000a0000 (640KB)
      |                                |
      |         free pages             |    base memory 
      |                                |
      +--------------------------------+  <- 0x00000000


    What entries (rows) in the page directory have been filled in after 
    mem_init? What addresses do they map and where do they point? In other 
    words, fill out this table as much as possible:
   
      Entry 	Base Virtual Address 	Points to (logically):
      1023	0xffc00000		Page table for top 4MB of phys mem, [0x0fc00000, 0x10000000) \
      1022	0xff800000		.                                                             | 
      .   	.         		.                                                              >   map the first 256MB of physical memory
      .   	.         		.                                                             |    starting at virtual address 0xf0000000 
      960 	0xf0000000              Page table for the first 4MB of phys mem, [0, 0x00400000)    /
      959       0xefc00000(MEMIOLIM)    Page table for phys mem that 'bootstack'(entry.S) refers to 
      .   	?			?
      957 	0xef400000(UVPT)        phys mem that PD itself refers to
      956       0xef000000(UPAGES)      Page table for phys mem that 'pages'(array) refers to
      .   	?			?
      2   	0x00800000		?
      1   	0x00400000		?
      0   	0x00000000		?

    Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. 
    Immediately after we turn on paging, EIP is still a low number (a little 
    over 1MB). At what point do we transition to running at an EIP above 
    KERNBASE? What makes it possible for us to continue executing at a low 
    EIP between when we enable paging and when we begin running at an EIP 
    above KERNBASE? Why is this transition necessary? 
  
      1) mov	$relocated, %eax
	 jmp	*%eax
       
      2) <fall through :)>
      3) After reading the kernel image, we set eip to the load address of entry() 
         and start executing the kernel. entry()'s load address is only a little 
         above 1MB physical mem position. After we turn on paging in entry(), we 
         still execute at a low address but address in eip is interpreted as a 
         virtual address. So we need a page directory which not only maps virtual 
         addresses [KERNBASE, KERNBASE+4MB) to physical addresses [0, 4MB) but also 
         maps virtual addresses [0, 4MB) to physical addresses [0, 4MB) to keep things 
         right.
